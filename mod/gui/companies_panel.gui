using companies_panel_filter.gui

# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width_minus_20 = 520
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

company_change_name_popup_type = {
	name = company_change_name_popup
}

types company_change_name
{
	type company_change_name_popup_type = default_popup
	{
		datacontext = "[CompanyChangeNamePopup.GetCompany]"

		blockoverride "window_header_name"
		{
			text = "CHANGE_NAME"
		}

		blockoverride "header_close_button_visibility"
		{
			visible = yes
		}

		blockoverride "header_close_button"
		{
			visible = yes
			onclick = "[PopupManager.HideCompanyChangeName]"
		}

		blockoverride "entire_scrollarea"
		{
			flowcontainer = {
				direction = vertical

				#background = {
				#	using = default_background
				#}

				# "Choose Name" section
				flowcontainer = {
					direction = vertical	
					spacing = 10

					# Set a custom name
					editbox = {
						visible = yes
						background = {
							using = text_edit_bg
						}

						# The name is referenced in code. If you change it, it will no longer get properly reset
						name = "company_name_edit"
						ontextedited = "[CompanyChangeNamePopup.OnEditName]"
						maxcharacters = 50
						size = { 420 40 }
						margin_left = 10
						alwaystransparent = no
						focuspolicy = all
						focus_on_visible = yes
						align = left|nobaseline
					}
					
					flowcontainer = {
						direction = horizontal
						using = default_list_position
						spacing = 20
					
						button = {
							using = default_button
							using = close_button_sound
							size = { 140 40 }
							text = "CANCEL"
							shortcut = "close_window"
							onclick = "[PopupManager.HideCompanyChangeName]"
						}
						button = {
							using = default_button_primary_action
							using = confirm_button_sound
							name = "confirmation_button"
							size = { 140 40 }
							text = "CONFIRM"
							enabled = "[IsValid(CompanyChangeNamePopup.Confirm)]"
							onclick = "[Execute(CompanyChangeNamePopup.Confirm)]"
							tooltip = "[GetDesc(CompanyChangeNamePopup.Confirm)]"
							onclick = "[PopupManager.HideCompanyChangeName]"
						}
					}
					
					widget = {
						size = { 420 10 }
					}
				}


			}
		}
		
		blockoverride "bottom_margin"
		{
			margin_bottom = 50
		}
	}
}

types companies_panel
{
	type companies_panel = default_block_window {
		name = "companies_panel"
		
		blockoverride "animation_state_block" {
			state = {
				name = _show
				on_start = "[GetVariableSystem.Clear('hide_current_companies')]"
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/companies"
				}
			}
		
			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/companies_stop"
				}
			}
		}

		blockoverride "header_close_button" {
			onclick = "[InformationPanelBar.ClosePanel]"
			onclick = "[GetVariableSystem.Clear('hide_current_companies')]"
		}

		blockoverride "entire_back_button" {
			back_button_large = {
				position = { 8 30 }
				onclick = "[GetVariableSystem.Toggle('hide_current_companies')]"
				visible = "[GetVariableSystem.Exists('hide_current_companies')]"
				input_action = "back"
			}

			back_button_large = {
				position = { 8 30 }
				onclick = "[InformationPanelBar.OpenPreviousPanel]"
				visible = "[Not(GetVariableSystem.Exists('hide_current_companies'))]"
				input_action = "back"
			}
		}
		
		blockoverride "window_header_name"
		{
			text = "COMPANIES_HEADER"
		}

		#TOP
		blockoverride "fixed_top" {
			tab_buttons = {
				# Overview
				blockoverride "first_button" {
					text = "[GetPlayer.GetNameNoFormatting]"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "[GetPlayer.GetNameNoFormatting]"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected" {
					text = "[GetPlayer.GetNameNoFormatting]"
				}

				# Details
				blockoverride "second_button" {
					text = "GLOBAL_CULTURE"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "GLOBAL_CULTURE"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('ranking')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('ranking')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('ranking') )]"
				}
				blockoverride "second_button_selected" {
					text = "GLOBAL_CULTURE"
				}
			}

			### sort buttons
			widget = {
				visible = "[InformationPanel.IsTabSelected('ranking')]"
				size = { @panel_width 30 }
				
				hbox = {

					sort_button = {
						layoutpolicy_horizontal = preferred
						size = { 70 30 }
						text = "COUNTRY"
						onclick = "[CompaniesPanel.Sort('owner')]"
						tooltip = "SORT_BY_COUNTRY"
					}

					sort_button = {
						layoutpolicy_horizontal = preferred
						size = { 220 30 }
						text = "NAME"
						onclick = "[CompaniesPanel.Sort('name')]"
						tooltip = "SORT_BY_NAME"
					}

					sort_button = {
						enabled = no
						layoutpolicy_horizontal = preferred
						size = { 110 30 }
						text = "BUILDINGS"
						tooltip = "BUILDINGS"
					}

					sort_button = {
						layoutpolicy_horizontal = preferred
						size = { 110 30 }
						text = "concept_building_balance_profit"
						onclick = "[CompaniesPanel.Sort('profit')]"
						tooltip = "concept_building_balance_profit"
					}
				}
			}
		}
		
		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_list_position
				direction = vertical
				minimumsize = { @panel_width_plus_14 -1 }
				maximumsize = { @panel_width_plus_14 -1 }
				datacontext = "[AccessPlayer]"

				#COMPANY
				country_stats_entry = {
					visible = "[Country.HasOwningCompany]"
					datacontext = "[Country.GetOwningCompany]"
					parentanchor = hcenter

					blockoverride "stats_tooltip" {
						tooltipwidget = {
							FancyTooltip_Company = {}
						}
					}

					### COMPANY ICON
					blockoverride "entire_icon" {
						button_icon_round = {
							parentanchor = right|vcenter
							position = { -5 0 }
							onclick = "[InformationPanelBar.OpenCompanyPanel(Company.Self)]"

							blockoverride "size" {
								size = { 45 45 }
							}

							blockoverride "icon_size" {
								size = { 65% 65% }
							}

							blockoverride "icon" {
								texture = "[Company.GetCompanyType.GetIcon]"
							}
						}
					}

					blockoverride "stats_label" {
						text = "[concept_company]"
					}

					blockoverride "stats_value" {
						text = "[Company.GetNameNoIcon]"
					}
				}

				top_illu = {
					datacontext = "[AccessPlayer]"
					blockoverride "illu" {
						texture = "gfx/interface/illustrations/top_illus/top_illu_companies.dds"
					}

					size = { @panel_width_plus_10 120 }

					flowcontainer = {
						direction = vertical
						parentanchor = center

						textbox = {	
							margin_top = 2			
							text = "BONUS_FOR_ESTABLISHED_COMPANIES"
							using = fontsize_xl
							using = companies_header_texts
						}

						textbox = {				
							text = "COMPANY_THROUGHPUT_BONUS_HEADER"
							using = companies_header_texts
						}


						textbox = {				
							text = "COMPANY_CONSTRUCTION_BONUS_HEADER"
							using = companies_header_texts
						}

						textbox = {
							text = "USING_X_FREE_CHARTERS"
							using = companies_header_texts
						}
					}
				}

				flowcontainer = {
					visible = "[Not(GetVariableSystem.Exists('hide_current_companies'))]"
					parentanchor = hcenter
					direction = vertical
					default_header_2texts = {
						blockoverride "text1" {
							text = "ESTABLISHED_COMPANIES"
						}
						blockoverride "text2" {
							text = "COMPANIES_AMOUNT_HEADER"
						}
					}

					flowcontainer = {
						direction = vertical
						parentanchor = hcenter
						margin = { 0 10 }
						spacing = 10

						### COMPANIES
						flowcontainer = {
							parentanchor = hcenter
							visible = "[Not(IsDataModelEmpty(AccessPlayer.GetCompanies))]"
							minimumsize = { @panel_width -1 }
							maximumsize = { @panel_width -1 }
							datamodel = "[AccessPlayer.GetCompanies]"
							direction = vertical
							spacing = 10

							item = {
								company_item = {}
							}
						}

						flowcontainer = {
							parentanchor = hcenter
							visible = "[GreaterThan_int32(AccessPlayer.GetNumAvailableCompanies, '(int32)0')]"
							minimumsize = { @panel_width -1 }
							maximumsize = { @panel_width -1 }
							datamodel = "[DataModelRepeatedItem(AccessPlayer.GetNumAvailableCompanies)]"
							direction = vertical
							spacing = 10

							item = {
								button_icon_plus_square = {
									size = { @panel_width 100 }
									onclick = "[GetVariableSystem.Toggle('hide_current_companies')]"
									onclick = "[GetVariableSystem.Clear('available_companies')]"
									onclick = "[ScrollPanelToTop('companies_panel')]"
									
									blockoverride "icon_size" {
										size = { 80 80 }
									}
								}
							}
						}
					}
				}

                ###MODADDED Uboy.UI.CompanyFilter mod : button + grid
                widget = {
                    visible = "[InformationPanel.IsTabSelected('default')]"
                    size = { @panel_width 60 }
                    
                    building_filter_button = {
                        blockoverride "onstart" {
                            on_start = "[GetVariableSystem.Clear('show_building_type_filter')]"
                        }
                        blockoverride "onclick" {
                            onclick = "[GetVariableSystem.Clear('selected_building_filter')]"
                            onclick = "[GetVariableSystem.Clear('show_building_type_filter')]"
                        }
                        parentanchor = hcenter
                    }
                }

				building_filter_grid = {
                }

                button = {
                    size = { 540 50 }
                    using = default_button
                    onclick = "[GetVariableSystem.Set('selected_building_filter','wheat_farm')]"
                    #onclick = "[GetVariableSystem.Clear('show_building_type_filter')]"
                    textbox = {
                        parentanchor = vcenter
                        position = { 60 0 }
                        raw_text = "[GetVariableSystem.HasValue('selected_building_filter','wheat_farm')]"
                    }
                }
				###MODADDED END

				### sort buttons
				widget = {
					size = { @panel_width_plus_14 30 }
					
					hbox = {

						sort_button = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							onclick = "[AccessPlayer.SortCompanies('name')]"
							tooltip = "NAME"
							text = "NAME"
						}

						sort_button = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							onclick = "[AccessPlayer.SortCompanies('building_database_order')]"
							tooltip = "BUILDING_DATABASE_ORDER"
							text = "BUILDING_DATABASE_ORDER"
						}

						sort_button = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							onclick = "[AccessPlayer.SortCompanies('productivity')]"
							tooltip = "SORT_BY_BUILDING_PRODUCTIVITY"
							text = "concept_productivity"
						}

						sort_button = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							onclick = "[AccessPlayer.SortCompanies('levels')]"
							tooltip = "SORT_BY_BUILDING_SIZE"
							text = "concept_building_levels"
						}
					}
				}
				
				section_header_button = {
					visible = "[Not(IsDataModelEmpty(AccessPlayer.GetAvailableCompanies))]"
						
					blockoverride "left_text" {
						text = "AVAILABLE_COMPANIES"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(AccessPlayer.GetAvailableCompanies)]"
						}
					}

					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('available_companies')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[GetVariableSystem.Exists('available_companies')]"
					}

					blockoverride "onclick_showless" {
						visible = "[Not(GetVariableSystem.Exists('available_companies'))]"
					}
				}

				### AVAILABLE COMPANIES
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[Not(GetVariableSystem.Exists('available_companies'))]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.GetAvailableCompanies))]"
						datamodel = "[AccessPlayer.GetAvailableCompanies]"
						direction = vertical
						spacing = 5

						item = {
							potential_company_item = {}
						}
					}
				}

				# ATTAINABLE COMPANIES
				section_header_button = {
					blockoverride "left_text" {
						text = "ATTAINABLE_COMPANIES"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(AccessPlayer.GetAttainableCompanies)]"
						}
					}
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('potential_companies')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists('potential_companies'))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists('potential_companies')]"
					}
				}

				### ATTAINABLE COMPANIES
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[GetVariableSystem.Exists('potential_companies')]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.GetAttainableCompanies))]"
						datamodel = "[AccessPlayer.GetAttainableCompanies]"
						direction = vertical
						spacing = 5

						item = {
							potential_company_item = {}
						}
					}
				}		

				# POTENTIAL COMPANIES
				section_header_button = {
					blockoverride "left_text" {
						text = "POTENTIAL_COMPANIES"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(AccessPlayer.GetPotentialCompanies)]"
						}
					}
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('unavailable_companies')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists('unavailable_companies'))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists('unavailable_companies')]"
					}
				}

				### POTENTIAL COMPANIES
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[GetVariableSystem.Exists('unavailable_companies')]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.GetPotentialCompanies))]"
						datamodel = "[AccessPlayer.GetPotentialCompanies]"
						direction = vertical
						spacing = 5

						item = {
							potential_company_item = {}
						}
					}
				}			
			}

			flowcontainer = {
				parentanchor = hcenter

				visible = "[InformationPanel.IsTabSelected('ranking')]"

				flowcontainer = {
					direction = vertical

					datamodel = "[CompaniesPanel.GetCompanies]"

					item = {
						flowcontainer = {
							tooltipwidget = {
								FancyTooltip_Company = {}
							}
							minimumsize = { @panel_width 34 }
							margin_left = 10
							margin_right = 10

							using = alternating_dark_bg

							tiny_flag = {
								datacontext = "[Company.GetCountry]"
								parentanchor = vcenter
							}

							widget = {
								size = { 10 10 }
							}

							textbox = {
								text = "[Company.GetName]"
								autoresize = yes
								align = nobaseline
								minimumsize = { 240 -1 }
								maximumsize = { 240 -1 }
								elide = right
								margin_right = 5
								parentanchor = vcenter
							}

							button_icon_goto = {
								visible = "[Company.GetBuilding.IsValid]"
								parentanchor = vcenter
								size = { 23 23 }
								using = tooltip_above
								tooltip = "GO_TO_BUTTON_COMPANY"
								onclick = "[InformationPanelBar.OpenCompanyPanel(Company.Self)]"
							}

							widget = { size = { 10 10 } }

							overlappingitembox = {
								spacing = 2
								datamodel = "[Company.GetBuildingTypes]"
								size = { 110 30 }
								parentanchor = vcenter

								item = {
									button = {
										texture = "[BuildingType.GetIcon]"
										onrightclick = "[RightClickMenuManager.ShowForBuildingType(BuildingType.AccessSelf)]"
										effectname = "NoHighlight"
										distribute_visual_state = no
										inherit_visual_state = no
										alpha = "[TransparentIfZero_int32(BuildingType.GetNumLevelsOwnedByCompanyRaw(Company.Self))]"
										size = { 30 30 }
										
										textbox = {
											autoresize = yes
											position = { 4 0 }
											parentanchor = bottom
											align = right|nobaseline
											max_width = 26
											elide = right
											fontsize_min = 12
											raw_text = "[BuildingType.GetNumLevelsOwnedByCompanyFormatted(Company.Self)]"
										}

										tooltipwidget = {
											FancyTooltip_BuildingType = {}
										}
									}
								}
							}


							textbox = {
								raw_text = "@money![Company.GetProfit|v+=D]"
								autoresize = yes
								align = right|nobaseline
								minimumsize = { 100 -1 }
								maximumsize = { 100 -1 }
								parentanchor = vcenter
							}
						}
					}
				}
			}
		}
	}

	type company_item = container {

		flowcontainer = {
			direction = vertical
			minimumsize = { @panel_width -1 }		
			maximumsize = { @panel_width -1 }
			margin = { 10 10 }
			margin_top = 3
			
			background = {
				using = simple_frame
			}

			tooltipwidget = {
				FancyTooltip_Company = {}
			}

			container = {
				minimumsize = { 536 -1 }
				parentanchor = hcenter

				flowcontainer = {
					direction = vertical
					minimumsize = { @panel_width_minus_20 }
					parentanchor = vcenter
					margin_left = 5
					datacontext = "[Company.GetCompanyType]"

					background = {
						using = fade_right_simple
						using = fade_down_simple
					}

					flowcontainer = {
						minimumsize = { @panel_width_minus_20 -1}
						spacing = 5
						margin_top = 7

						### EXECUTIVE CHARACTER
						character_portrait_small2 = {
							parentanchor = vcenter
							datacontext = "[Company.AccessExecutive]"
							blockoverride "show_hat" {}
							blockoverride "highlight" {}
						}

						flowcontainer = {
							parentanchor = vcenter
							spacing = 5

							button = {
								parentanchor = vcenter
								size = { 365 60 }
								using = default_button
								enabled = "[Company.GetBuilding.IsValid]"
								onclick = "[InformationPanelBar.OpenCompanyPanel(Company.Self)]"
								tooltip = "GO_TO_BUTTON_COMPANY"
								using = tooltip_ne

								flowcontainer = {
									parentanchor = vcenter
									position = { 10 0 }
									direction = vertical

									textbox = {
										autoresize = yes
										align = nobaseline
										using = elide_fontsize_min
										default_format = "#header"
										using = fontsize_large
										max_width = 350
										text = "[Company.GetNameNoFormatting]"
									}

									textbox = {
										autoresize = yes
										align = nobaseline
										multiline = no
										fontsize = 14
										max_width = 350
										text = "COMPANY_ESTABLISHED"
									}
								}
							}
						}

						flowcontainer = {
							parentanchor = vcenter
							spacing = 5
							
							### EDIT COMPANY NAME
							button_icon_edit = {
								size = { 26 26 }
								onclick = "[PopupManager.ShowCompanyChangeName(Company.Self)]"
								tooltip = "CHANGE_NAME"
								using = tooltip_above
							}
						
							flowcontainer = {
								#direction = vertical
								spacing = 5

								### PIN COMPANY
								button_icon_pin = {
									size = { 26 26 }
									visible = "[Company.IsPinnedInOutliner]"
									onclick = "[Company.TogglePinInOutliner]"
									tooltip = "UNPIN_COMPANY"
								}

								### UNPIN COMPANY
								button_icon_unpin = {
									size = { 26 26 }
									visible = "[Not(Company.IsPinnedInOutliner)]"
									onclick = "[Company.TogglePinInOutliner]"
									tooltip = "PIN_COMPANY"
								}

								### DISBAND COMPANY
								button_icon_round_action = {
									size = { 26 26 }
									onclick = "[PopupManager.AskConfirmationCustom(GetPlayer.RemoveCompany(CompanyType.Self), 'company_confirmation_window')]"
									enabled = "[IsValid(GetPlayer.RemoveCompany(CompanyType.Self))]"
									tooltip = "REMOVE_COMPANY_DESC"

									blockoverride "icon_size" { size = { 70% 70% } }

									blockoverride "icon" {
										texture = "gfx/interface/icons/military_icons/disband_formation.dds"
									}
								}
							}
						}
					}
				}
			}

			flowcontainer = {
				spacing = 10
				
				container = {
					flowcontainer = {
						direction = vertical
						parentanchor = vcenter
						minimumsize = { 520 220 }
						maximumsize = { 520 -1 }
						margin = { 10 5 }
						margin_bottom = 30
						spacing = 10

						background = {
							texture = "[Company.AccessCompanyType.GetBackground]"
							using = simple_frame_mask
						}	

						background = {
							using = entry_bg_simple
						}

						### HQ
						widget = {
							size = { 200 55 }

							company_info_item = {
								datacontext = "[Company.GetBuilding]"

								blockoverride "header" {
									text = "[concept_company_hq]"
								}

								blockoverride "info_text" {
									raw_text = "[Building.GetState.GetCountry.GetFlagTextIcon] [Building.GetState.GetName]"
								}

								blockoverride "after_info" {
									button_icon_goto = {
										size = { 26 26 }
										using = tooltip_above
										tooltip = "GO_TO_BUTTON_COMPANY_HQ"
										onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
									}
								}
							}
						}

						### PRESTIGE GOOD
						widget = {
							size = { 200 67 }
							visible = "[Not(IsDataModelEmpty(Company.GetPrestigeGoods))]"

							company_info_item = {
								tooltip = "COMPANY_PRODUCING_PRESTIGE_GOODS_TOOLTIP"

								blockoverride "header" {
									text = "COMPANY_PRODUCING_PRESTIGE_GOODS_HEADER"
								}

								blockoverride "info" {
									dynamicgridbox = {
										flipdirection = yes
										datamodel_wrap = 6
										datamodel = "[Company.GetPrestigeGoods]"
										
										item = {
											button = {
												texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
												color = "[Goods.GetCategoryColor]"
												alpha = "[TransparentIfFalse(Company.IsProducingPrestigeGoods)]"
												enabled = "[Company.IsProducingPrestigeGoods]"
												onclick = "[InformationPanelBar.OpenGoodsPanel(Goods.GetMarket, Goods.Self)]"
												onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"

												tooltipwidget = {
													FancyTooltip_Goods = {}
												}
												
												block "bg_size" {
													size = { 40 40 }
												}
												
												button = {
													texture = "[Goods.GetTexture]"
													size = { 28 28 }
													parentanchor = center
													alwaystransparent = yes
												}

												icon = {
													visible = "[Goods.HasGoodsShortage]"
													tooltip = "GOODS_SHORTAGE_TOOLTIP"
													
													size = { 25 25 }
													texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
													parentanchor = bottom
												}

												cannot_be_trade_icon = {}

												icon = {
													size = { 100% 100% }
													texture = "gfx/interface/icons/goods_icons/prestige_goods/trade_good_icon_prestige_frame.dds"
													visible = "[Goods.IsPrestigeGoods]"
												}

												icon = {
													size = { 100% 100% }
													texture = "gfx/interface/icons/goods_icons/prestige_goods/trade_good_icon_prestige_ribbon.dds"
													visible = "[Goods.IsPrestigeGoods]"
												}
											}
										}
									}
								}
							}
						}

						prosperity_widget = {}
					}

					### BUILDING TYPES
					widget = {
						parentanchor = bottom|right
						size = { 255 170 }
						position = { -10 -10 }

						company_info_item = {
							blockoverride "header" {
								text = "COMPANY_AVAILABLE_INDUSTRIES_CONCEPT"
								align = right|nobaseline
							}

							blockoverride "top_expand" {
								expand = {}
							}

							blockoverride "bottom_divider" {}

							blockoverride "left_expand" {
								expand = {}
							}

							blockoverride "right_expand" {}

							blockoverride "info" {
								vbox = {
									layoutpolicy_vertical = expanding
									spacing = 2

									### ALL AVAILABLE BUILDING TYPES
									hbox = {
										layoutpolicy_horizontal = expanding

										expand = {}

										dynamicgridbox = {
											flipdirection = yes
											layoutanchor = topright
											datamodel_wrap = 5
											datamodel = "[Company.GetBuildingTypes]"

											item = {
												icon = {
													size = { 50 50 }
													texture = "[BuildingType.GetIcon]"

													icon = {
														visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_trade_center').Self)]"
														parentanchor = right
														size = { 25 25 }
														texture = "gfx/interface/icons/company_charter_icons/trade_charter.dds"
													}

													icon = {
														visible = "[Company.HasAdditionalIndustry(BuildingType.Self)]"
														parentanchor = right
														size = { 25 25 }
														texture = "gfx/interface/icons/company_charter_icons/industry_charter.dds"
													}

													tooltipwidget = {
														FancyTooltip_BuildingType = {
															blockoverride "tooltip_content_before" {
																custom_tooltip_textbox_with_empty_line = {
																	visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_trade_center').Self)]"
																	text = "BUILDING_TYPE_ICON_TRADE_CHARTER"
																}

																custom_tooltip_textbox_with_empty_line = {
																	visible = "[Company.HasAdditionalIndustry(BuildingType.Self)]"
																	text = "BUILDING_TYPE_ICON_ADDITIONAL_INDUSTRY"
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

					### COMPANY LOGO
					button = {
						parentanchor = right
						position = { -10 10 }
						size = { 130 130 }
						datacontext = "[Company.GetCompanyType]"
						tooltip = "GO_TO_BUTTON_COMPANY"
						onclick = "[InformationPanelBar.OpenCompanyPanel(Company.Self)]"
						texture = "[CompanyType.GetIcon]"

						tooltipwidget = {
							FancyTooltip_Company = {}
						}
					}
				}
			}
		}		
	}
	
	type potential_company_item = flowcontainer {
		direction = vertical
		minimumsize = { @panel_width -1 }		
		maximumsize = { @panel_width -1 }
		margin = { 10 10 }
		margin_top = 3
		spacing = 5
		background = {
			using = simple_frame
		}

		tooltipwidget = {
			FancyTooltip_CompanyType = {
				datacontext = "[GetPlayer]"
			}
		}

		container = {
			minimumsize = { 536 -1 }
			parentanchor = hcenter
			flowcontainer = {
				minimumsize = { 536 -1 }
				parentanchor = vcenter
				spacing = 5
				margin_left = 10
				margin_top = 2
				margin_bottom = 2

				background = {
					using = fade_right_simple
				}

				textbox = {
					text = "[CompanyType.GetNameNoFormatting]"
					default_format = "#header"
					autoresize = yes
					multiline = no
					using = fontsize_large
					using = company_item_text
					margin_bottom = 5
				}	
			}	
		}

		flowcontainer = {
			spacing = 10

			container = {
				# COMPANY DETAILS
				flowcontainer = {
					direction = vertical
					parentanchor = vcenter
					minimumsize = { 380 130 }
					maximumsize = { 380 -1 }
					margin = { 10 10 }
					spacing = 4

					background = {
						texture = "[CompanyType.GetBackground]"
					}
				
					background = {
						using = entry_bg_simple
					}

					textbox = {
						autoresize = yes
						align = nobaseline
						elide = right
						fontsize_min = 12
						max_width = 360
						text = "COMPANY_TYPE_HEADQUARTER_STATE"
					}

					textbox = {
						autoresize = yes
						align = nobaseline
						using = elide_fontsize_min
						max_width = 360
						text = "DATA_COMPANY_TYPE_PREDICTED_PRODUCTIVITY"
					}

					flowcontainer = {
						direction = horizontal
						spacing = 5							
						datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
						
						item = {
							company_type_building_item = {}
						}
					}
					
					flowcontainer = {					
						visible = "[Not(IsDataModelEmpty(CompanyType.GetPrestigeGoods))]"
							
						textbox = {
							autoresize = yes
							align = left|vcenter
							elide = right
							fontsize_min = 12
							max_width = 360
							text = "PRESTIGE_GOODS_CONCEPT"
						}		

						widget = { size = { 5 5 } }
						
						flowcontainer = {
							direction = horizontal
							spacing = 5
								
							datamodel = "[CompanyType.GetPrestigeGoods]"
							
							item = {
								company_type_prestige_good_item = {}
							}
						}	
					}
					
					textbox = {
						autoresize = yes
						align = nobaseline
						using = elide_fontsize_min
						max_width = 360
						multiline = yes
						text = "COMPANY_TYPE_PROSPERITY_MODIFIER"
					}
				}
			}

			# COMPANY LOGO
			flowcontainer = {
				direction = vertical
				parentanchor = vcenter

				icon = {
					parentanchor = hcenter
					size = { 90 90 }
					texture = "[CompanyType.GetIcon]"
				}

				button = {
					using = default_button
					using = company_building_establish_sound
					size = { 130 40 }
					name = "tutorial_highlight_establish_company"
					text = "ESTABLISH_COMPANY"
					onclick = "[PopupManager.AskConfirmationCustom(GetPlayer.CreateCompany(CompanyType.Self), 'company_confirmation_window')]"
					onclick = "[GetVariableSystem.Clear('hide_current_companies')]"
					enabled = "[IsValid(GetPlayer.CreateCompany(CompanyType.Self))]"
					tooltip = "CREATE_COMPANY_DESC"

				}
			}

		}
            ###TESTMODADDED
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.3
                }
                
                textbox = {
                    raw_text = "TEST: Potential Building Types"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                dynamicgridbox = {
                    datamodel_wrap = 8
                    datamodel = "[CompanyType.GetPotentialBuildingTypes(GetPlayer.Self)]"
                    
                    item = {
                        widget = {
                            size = { 50 50 }
                            
                            button = {
                                size = { 45 45 }
                                texture = "[BuildingType.GetIcon]"
                                parentanchor = center
                                
                                tooltipwidget = {
                                    widget = {
                                        size = { 300 60 }
                                        
                                        background = {
                                            using = default_background
                                        }
                                        
                                        textbox = {
                                            parentanchor = center
                                            raw_text = "[BuildingType.GetName]"
                                            autoresize = yes
                                            align = hcenter|nobaseline
                                            multiline = yes
                                            max_width = 280
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                textbox = {
                    raw_text = "Count: [GetDataModelSize(CompanyType.GetPotentialBuildingTypes(GetPlayer.Self))]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    fontsize = 12
                    parentanchor = hcenter
                }
            }
            
            # TEST 섹션 2: AccessBuildingTypes (비교용)
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.2
                }
                
                textbox = {
                    raw_text = "TEST: Access Building Types (Original)"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                dynamicgridbox = {
                    datamodel_wrap = 8
                    datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                    
                    item = {
                        widget = {
                            size = { 50 50 }
                            
                            button = {
                                size = { 45 45 }
                                texture = "[BuildingType.GetIcon]"
                                parentanchor = center
                                
                                tooltipwidget = {
                                    widget = {
                                        size = { 300 60 }
                                        
                                        background = {
                                            using = default_background
                                        }
                                        
                                        textbox = {
                                            parentanchor = center
                                            raw_text = "[BuildingType.GetName]"
                                            autoresize = yes
                                            align = hcenter|nobaseline
                                            multiline = yes
                                            max_width = 280
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                textbox = {
                    raw_text = "Count: [GetDataModelSize(CompanyType.AccessBuildingTypes(GetPlayer.Self))]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    fontsize = 12
                    parentanchor = hcenter
                }
            }
            ###TESTMODADDED END
            ###TESTMODADDED
            ### TEST 3: GetCategory
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.25
                }
                
                textbox = {
                    raw_text = "TEST 3: GetCategory"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                textbox = {
                    raw_text = "Category: [CompanyType.GetCategory]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    parentanchor = hcenter
                }
            }
            ### TEST 4: DataModelFirst - 수정 버전 (조건부 표시)
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.35
                }
                
                textbox = {
                    raw_text = "TEST 4A: DataModelFirst 존재 여부 테스트"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                # 리스트가 비어있지 않을 때만 표시
                container = {
                    visible = "[Not(IsDataModelEmpty(CompanyType.AccessBuildingTypes(GetPlayer.Self)))]"
                    minimumsize = { 500 -1 }
                    
                    flowcontainer = {
                        direction = vertical
                        parentanchor = hcenter
                        spacing = 5
                        
                        textbox = {
                            raw_text = "리스트 비어있지 않음 - 테스트 진행"
                            autoresize = yes
                            align = hcenter|nobaseline
                        }
                        
                        # 직접 텍스트로만 테스트
                        textbox = {
                            raw_text = "First exists: [DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)0'))]"
                            autoresize = yes
                            align = hcenter|nobaseline
                            multiline = yes
                            max_width = 480
                        }
                    }
                }
                
                textbox = {
                    visible = "[IsDataModelEmpty(CompanyType.AccessBuildingTypes(GetPlayer.Self))]"
                    raw_text = "리스트가 비어있음"
                    autoresize = yes
                    align = hcenter|nobaseline
                }
            }

            ###TEST 4-B : 인자 없이 시도
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.3
                }
                
                textbox = {
                    raw_text = "TEST 5: 다양한 DataModelFirst 인자 테스트"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                    multiline = yes
                    max_width = 500
                }
                
                # 각기 다른 인자로 시도
                textbox = {
                    raw_text = "인자 0: [DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)0'))]"
                    autoresize = yes
                    align = left|nobaseline
                    multiline = yes
                    max_width = 500
                }
                
                textbox = {
                    raw_text = "인자 1: [DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1'))]"
                    autoresize = yes
                    align = left|nobaseline
                    multiline = yes
                    max_width = 500
                }
                
                textbox = {
                    raw_text = "인자 2: [DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)2'))]"
                    autoresize = yes
                    align = left|nobaseline
                    multiline = yes
                    max_width = 500
                }
            }
            ### TEST 4-C: 단순화된 ObjectsEqual 테스트
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.4
                }
                
                textbox = {
                    raw_text = "TEST 6: ObjectsEqual 기본 테스트"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                # GetBuildingType 자체가 작동하는지 확인
                textbox = {
                    raw_text = "wheat_farm exists: [GetBuildingType('building_wheat_farm').GetName]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    multiline = yes
                    max_width = 500
                }
                
                # ObjectsEqual 기본 테스트
                textbox = {
                    raw_text = "Self equals Self: [ObjectsEqual(GetBuildingType('building_wheat_farm'), GetBuildingType('building_wheat_farm'))]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    multiline = yes
                    max_width = 500
                }
                
                textbox = {
                    raw_text = "Wheat != Coal: [ObjectsEqual(GetBuildingType('building_wheat_farm'), GetBuildingType('building_coal_mine'))]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    multiline = yes
                    max_width = 500
                }
            }
            ### TEST 4-D: EqualTo_string 기본 테스트
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.35
                }
                
                textbox = {
                    raw_text = "TEST 7: EqualTo_string 테스트"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                textbox = {
                    raw_text = "wheat_farm key: [GetBuildingType('building_wheat_farm').GetKey]"
                    autoresize = yes
                    align = hcenter|nobaseline
                }
                
                textbox = {
                    raw_text = "Key == 'building_wheat_farm': [EqualTo_string(GetBuildingType('building_wheat_farm').GetKey, 'building_wheat_farm')]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    multiline = yes
                    max_width = 500
                }
                
                textbox = {
                    raw_text = "Key == 'wrong': [EqualTo_string(GetBuildingType('building_wheat_farm').GetKey, 'wrong')]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    multiline = yes
                    max_width = 500
                }
            }

            ### TEST 8: DataModelFirst 직접 사용 (Critical!)
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.45
                }
                
                textbox = {
                    raw_text = "TEST 8: DataModelFirst 직접 datamodel로 사용"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                    multiline = yes
                    max_width = 500
                }
                
                # DataModelFirst를 직접 datamodel로 사용
                dynamicgridbox = {
                    visible = "[Not(IsDataModelEmpty(CompanyType.AccessBuildingTypes(GetPlayer.Self)))]"
                    datamodel_wrap = 5
                    datamodel = "[DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1')]"
                    
                    item = {
                        widget = {
                            size = { 50 50 }
                            
                            button = {
                                size = { 45 45 }
                                texture = "[BuildingType.GetIcon]"
                                parentanchor = center
                                
                                tooltipwidget = {
                                    widget = {
                                        size = { 250 60 }
                                        background = { using = default_background }
                                        
                                        textbox = {
                                            parentanchor = center
                                            raw_text = "Name: [BuildingType.GetName]"
                                            autoresize = yes
                                            align = hcenter|nobaseline
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                textbox = {
                    raw_text = "위에 아이콘이 표시되면 DataModelFirst 작동!"
                    autoresize = yes
                    align = hcenter|nobaseline
                    fontsize = 12
                }
            }

            ### TEST 9: DataModelLast 직접 사용
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.4
                }
                
                textbox = {
                    raw_text = "TEST 9: DataModelLast 직접 datamodel로 사용"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                    multiline = yes
                    max_width = 500
                }
                
                # DataModelLast를 직접 datamodel로 사용
                dynamicgridbox = {
                    visible = "[Not(IsDataModelEmpty(CompanyType.AccessBuildingTypes(GetPlayer.Self)))]"
                    datamodel_wrap = 5
                    datamodel = "[DataModelLast(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1')]"
                    
                    item = {
                        widget = {
                            size = { 50 50 }
                            
                            button = {
                                size = { 45 45 }
                                texture = "[BuildingType.GetIcon]"
                                parentanchor = center
                                
                                tooltipwidget = {
                                    widget = {
                                        size = { 250 60 }
                                        background = { using = default_background }
                                        
                                        textbox = {
                                            parentanchor = center
                                            raw_text = "Name: [BuildingType.GetName]"
                                            autoresize = yes
                                            align = hcenter|nobaseline
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                textbox = {
                    raw_text = "위에 아이콘이 표시되면 DataModelLast 작동!"
                    autoresize = yes
                    align = hcenter|nobaseline
                    fontsize = 12
                }
            }
            ### TEST 10A: DataModelFirst의 반환 타입 확인
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.5
                }
                
                textbox = {
                    raw_text = "TEST 10A: DataModelFirst 반환값 분석"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                # 1. DataModelFirst가 비어있는지
                textbox = {
                    raw_text = "Step 1 - IsEmpty: [IsDataModelEmpty(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1'))]"
                    autoresize = yes
                    align = left|nobaseline
                    multiline = yes
                    max_width = 500
                }
                
                # 2. DataModelFirst가 아이템을 가지고 있는지
                textbox = {
                    raw_text = "Step 2 - HasItems: [DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1'))]"
                    autoresize = yes
                    align = left|nobaseline
                    multiline = yes
                    max_width = 500
                }
                
                # 3. DataModelFirst의 Size
                textbox = {
                    raw_text = "Step 3 - Size: [GetDataModelSize(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1'))]"
                    autoresize = yes
                    align = left|nobaseline
                    multiline = yes
                    max_width = 500
                }
            }
            ### TEST 10B: item 컨텍스트에서 접근
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.48
                }
                
                textbox = {
                    raw_text = "TEST 10B: DataModelFirst의 item에서 Key 추출"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                # DataModelFirst를 순회하면서 Key 출력
                dynamicgridbox = {
                    datamodel_wrap = 5
                    datamodel = "[DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1')]"
                    
                    item = {
                        flowcontainer = {
                            direction = vertical
                            spacing = 3
                            
                            button = {
                                size = { 45 45 }
                                texture = "[BuildingType.GetIcon]"
                            }
                            
                            textbox = {
                                raw_text = "Key: [BuildingType.GetKey]"
                                autoresize = yes
                                align = hcenter|nobaseline
                                fontsize = 11
                                max_width = 100
                                multiline = yes
                            }
                        }
                    }
                }
            }

            ### TEST 10C: 비교를 위한 변수 설정 테스트
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.46
                }
                
                textbox = {
                    raw_text = "TEST 10C: GetVariableSystem으로 Key 저장 후 비교"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                    multiline = yes
                    max_width = 500
                }
                
                # item 내부에서 변수 설정 버튼
                dynamicgridbox = {
                    datamodel_wrap = 5
                    datamodel = "[DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1')]"
                    
                    item = {
                        button = {
                            size = { 80 80 }
                            onclick = "[GetVariableSystem.Set('test_building_key', BuildingType.GetKey)]"
                            
                            flowcontainer = {
                                direction = vertical
                                parentanchor = center
                                spacing = 3
                                
                                icon = {
                                    size = { 50 50 }
                                    texture = "[BuildingType.GetIcon]"
                                }
                                
                                textbox = {
                                    raw_text = "클릭!"
                                    autoresize = yes
                                    align = hcenter|nobaseline
                                    fontsize = 10
                                }
                            }
                        }
                    }
                }
                
                textbox = {
                    raw_text = "저장된 Key: [GetVariableSystem.Get('test_building_key')]"
                    autoresize = yes
                    align = hcenter|nobaseline
                    margin_top = 5
                }
            }

            ### TEST 10D: 저장된 Key로 비교
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.44
                }
                
                textbox = {
                    raw_text = "TEST 10D: 저장된 Key와 문자열 비교"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                flowcontainer = {
                    direction = horizontal
                    spacing = 10
                    parentanchor = hcenter
                    
                    textbox = {
                        raw_text = "wheat_farm 인가?"
                        autoresize = yes
                        align = right|nobaseline
                    }
                    
                    icon = {
                        visible = "[GetVariableSystem.HasValue('test_building_key', 'building_wheat_farm')]"
                        size = { 30 30 }
                        texture = "gfx/interface/buttons/button_icons/check.dds"
                    }
                    
                    icon = {
                        visible = "[Not(GetVariableSystem.HasValue('test_building_key', 'building_wheat_farm'))]"
                        size = { 30 30 }
                        texture = "gfx/interface/buttons/button_icons/close.dds"
                    }
                }
                
                flowcontainer = {
                    direction = horizontal
                    spacing = 10
                    parentanchor = hcenter
                    
                    textbox = {
                        raw_text = "logging_camp 인가?"
                        autoresize = yes
                        align = right|nobaseline
                    }
                    
                    icon = {
                        visible = "[GetVariableSystem.HasValue('test_building_key', 'building_logging_camp')]"
                        size = { 30 30 }
                        texture = "gfx/interface/buttons/button_icons/check.dds"
                    }
                    
                    icon = {
                        visible = "[Not(GetVariableSystem.HasValue('test_building_key', 'building_logging_camp'))]"
                        size = { 30 30 }
                        texture = "gfx/interface/buttons/button_icons/close.dds"
                    }
                }
            }
            ### TEST 10E: 최종 - visible에서 변수 비교로 필터링
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 10
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.52
                }
                
                textbox = {
                    raw_text = "TEST 10E: FINAL - 변수 기반 필터링 시뮬레이션"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                    multiline = yes
                    max_width = 500
                }
                
                textbox = {
                    raw_text = "만약 위에서 클릭한 BuildingType이 wheat_farm이면 이 회사가 표시됩니다:"
                    autoresize = yes
                    align = hcenter|nobaseline
                    multiline = yes
                    max_width = 500
                    margin_bottom = 5
                }
                
                # 필터링 시뮬레이션
                container = {
                    visible = "[GetVariableSystem.HasValue('test_building_key', 'building_wheat_farm')]"
                    minimumsize = { 500 60 }
                    
                    background = {
                        using = entry_bg_simple
                    }
                    
                    flowcontainer = {
                        parentanchor = center
                        direction = vertical
                        
                        textbox = {
                            raw_text = "필터 성공!"
                            autoresize = yes
                            align = hcenter|nobaseline
                            default_format = "#bold"
                        }
                        
                        textbox = {
                            raw_text = "이 Company는 wheat_farm을 가지고 있습니다"
                            autoresize = yes
                            align = hcenter|nobaseline
                            fontsize = 12
                        }
                    }
                }
                
                container = {
                    visible = "[Not(GetVariableSystem.HasValue('test_building_key', 'building_wheat_farm'))]"
                    minimumsize = { 500 60 }
                    
                    background = {
                        using = entry_bg_simple
                        alpha = 0.3
                    }
                    
                    textbox = {
                        parentanchor = center
                        raw_text = "필터링됨 (wheat_farm 없음)"
                        autoresize = yes
                        align = hcenter|nobaseline
                    }
                }
                
                textbox = {
                    raw_text = "이 방식으로 필터링 가능한지 확인!"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                    margin_top = 10
                }
            }
            # TEST 11: 자동 변수 설정 - on_start 활용

#            ### TEST 11A: on_start로 자동 변수 설정 테스트
#            flowcontainer = {
#                direction = vertical
#                parentanchor = hcenter
#                margin = { 10 5 }
#                spacing = 5
#                minimumsize = { @panel_width -1 }
#                
#                background = {
#                    using = dark_area
#                    alpha = 0.55
#                }
#                
#                state = {
#                    name = _show
#                    # 이 flowcontainer가 표시될 때 자동 실행
#                    on_start = "[GetVariableSystem.Set('auto_test_trigger', 'true')]"
#                }
#                
#                textbox = {
#                    raw_text = "TEST 11A: on_start 자동 실행 테스트"
#                    autoresize = yes
#                    align = hcenter|nobaseline
#                    default_format = "#bold"
#                    parentanchor = hcenter
#                }
#                
#                textbox = {
#                    raw_text = "auto_test_trigger 변수: [GetVariableSystem.Get('auto_test_trigger')]"
#                    autoresize = yes
#                    align = hcenter|nobaseline
#                }
#                
#                textbox = {
#                    raw_text = "위에 'true'가 표시되면 on_start 작동!"
#                    autoresize = yes
#                    align = hcenter|nobaseline
#                    fontsize = 12
#                }
#            }

            ### TEST 11A-2: widget에서 on_start
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.55
                }
                
                textbox = {
                    raw_text = "TEST 11A-2: widget on_start 테스트"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                widget = {
                    size = { 400 50 }
                    
                    state = {
                        name = _show
                        on_start = "[GetVariableSystem.Set('widget_test', 'widget_works')]"
                    }
                    
                    textbox = {
                        parentanchor = center
                        raw_text = "widget 변수: [GetVariableSystem.Get('widget_test')]"
                        autoresize = yes
                        align = hcenter|nobaseline
                    }
                }
            }

            ### TEST 11A-3: button에서 on_start
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.53
                }
                
                textbox = {
                    raw_text = "TEST 11A-3: button on_start 테스트"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                }
                
                button = {
                    size = { 400 50 }
                    
                    state = {
                        name = _show
                        on_start = "[GetVariableSystem.Set('button_test', 'button_works')]"
                    }
                    
                    textbox = {
                        parentanchor = center
                        raw_text = "button 변수: [GetVariableSystem.Get('button_test')]"
                        autoresize = yes
                        align = hcenter|nobaseline
                    }
                }
            }

            ### TEST 11A-4: visible 조건 트리거
            flowcontainer = {
                direction = vertical
                parentanchor = hcenter
                margin = { 10 5 }
                spacing = 5
                minimumsize = { @panel_width -1 }
                
                background = {
                    using = dark_area
                    alpha = 0.51
                }
                
                textbox = {
                    raw_text = "TEST 11A-4: visible이 true일 때만 표시되는 widget"
                    autoresize = yes
                    align = hcenter|nobaseline
                    default_format = "#bold"
                    parentanchor = hcenter
                    multiline = yes
                    max_width = 500
                }
                
                widget = {
                    # 리스트가 비어있지 않을 때만 표시
                    visible = "[Not(IsDataModelEmpty(CompanyType.AccessBuildingTypes(GetPlayer.Self)))]"
                    size = { 400 50 }
                    
                    state = {
                        name = _show
                        on_start = "[GetVariableSystem.Set('visible_test', 'visible_works')]"
                    }
                    
                    textbox = {
                        parentanchor = center
                        raw_text = "visible 변수: [GetVariableSystem.Get('visible_test')]"
                        autoresize = yes
                        align = hcenter|nobaseline
                    }
                }
            }
#            ### TEST 10: 결정적 테스트 - visible 조건문에서 비교
#            flowcontainer = {
#                direction = vertical
#                parentanchor = hcenter
#                margin = { 10 5 }
#                spacing = 10
#                minimumsize = { @panel_width -1 }
#                
#                background = {
#                    using = dark_area
#                    alpha = 0.5
#                }
#                
#                textbox = {
#                    raw_text = "TEST 10: CRITICAL - visible 조건에서 BuildingType 비교"
#                    autoresize = yes
#                    align = hcenter|nobaseline
#                    default_format = "#bold"
#                    parentanchor = hcenter
#                    multiline = yes
#                    max_width = 500
#                }
#                
#                # 만약 첫 번째가 wheat_farm이면 체크 표시
#                flowcontainer = {
#                    direction = horizontal
#                    spacing = 10
#                    parentanchor = hcenter
#                    
#                    textbox = {
#                        raw_text = "첫번째가 Wheat Farm인가?"
#                        autoresize = yes
#                        align = right|nobaseline
#                    }
#                    
#                    icon = {
#                        visible = "[And(
#                            DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1')),
#                            ObjectsEqual(
#                                DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1').AccessSelf,
#                                GetBuildingType('building_wheat_farm').AccessSelf
#                            )
#                        )]"
#                        size = { 30 30 }
#                        texture = "gfx/interface/buttons/button_icons/check.dds"
#                    }
#                    
#                    icon = {
#                        visible = "[Not(And(
#                            DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1')),
#                            ObjectsEqual(
#                                DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1').AccessSelf,
#                                GetBuildingType('building_wheat_farm').AccessSelf
#                            )
#                        ))]"
#                        size = { 30 30 }
#                        texture = "gfx/interface/buttons/button_icons/close.dds"
#                    }
#                }
#                
#                # 만약 첫 번째가 logging_camp이면 체크 표시
#                flowcontainer = {
#                    direction = horizontal
#                    spacing = 10
#                    parentanchor = hcenter
#                    
#                    textbox = {
#                        raw_text = "첫번째가 Logging Camp인가?"
#                        autoresize = yes
#                        align = right|nobaseline
#                    }
#                    
#                    icon = {
#                        visible = "[And(
#                            DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1')),
#                            ObjectsEqual(
#                                DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1').AccessSelf,
#                                GetBuildingType('building_logging_camp').AccessSelf
#                            )
#                        )]"
#                        size = { 30 30 }
#                        texture = "gfx/interface/buttons/button_icons/check.dds"
#                    }
#                    
#                    icon = {
#                        visible = "[Not(And(
#                            DataModelHasItems(DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1')),
#                            ObjectsEqual(
#                                DataModelFirst(CompanyType.AccessBuildingTypes(GetPlayer.Self), '(int32)1').AccessSelf,
#                                GetBuildingType('building_logging_camp').AccessSelf
#                            )
#                        ))]"
#                        size = { 30 30 }
#                        texture = "gfx/interface/buttons/button_icons/close.dds"
#                    }
#                }
#                
#                textbox = {
#                    raw_text = "만약 위에서 체크가 정확히 하나만 나오면 필터링 가능!"
#                    autoresize = yes
#                    align = hcenter|nobaseline
#                    default_format = "#bold"
#                    parentanchor = hcenter
#                    margin_top = 10
#                }
#            }
            ###TESTMODADDED END
	}

	type prosperity_widget = flowcontainer {
		direction = vertical

		### PRODUCTIVITY
		textbox = {
			align = nobaseline
			autoresize = yes
			using = elide_fontsize_min
			max_width = 150
			text = "COMPANY_PRODUCTIVITY"
		}

		### PROFIT
		textbox = {
			align = nobaseline
			autoresize = yes
			using = elide_fontsize_min
			max_width = 200
			text = "COMPANY_PROFIT"
			tooltip = "COMPANY_TREND_PROFIT_TOOLTIP"
		}

		flowcontainer = {
			direction = vertical
			spacing = 5
			tooltip = "COMPANY_PROSPERITY_TOOLTIP"

			### PROSPERITY
			textbox = {
				align = nobaseline
				autoresize = yes
				using = elide_fontsize_min
				max_width = 270
				text = "COMPANY_PROSPERITY_FORMATTED"
			}

			#Progress Bar
			widget = {
				size = { 240 10 }
				using = tooltip_below

				changed_value_increased_progressbar_horizontal = {
					visible = "[And(GreaterThan_CFixedPoint(Company.GetProsperityChange,'(CFixedPoint)0'), LessThan_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"
					size = { 100%  100% }

					blockoverride "values" {
						min = 0
						max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
						value = "[Company.GetProsperity]"
					}

					blockoverride "animate_negative_change" {
						animate_negative_changes = no
					}

					blockoverride "arrow_texture_density" {
						texture_density = 4 #use to match height of progressbar
					}
				}

				changed_value_decreased_progressbar_horizontal = {
					visible = "[And(LessThan_CFixedPoint(Company.GetProsperityChange,'(CFixedPoint)0'), LessThan_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"
					size = { 90% 100% }

					blockoverride "values" {
						min = 0
						max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
						value = "[Company.GetProsperity]"
					}

					blockoverride "arrow_texture_density" {
						texture_density = 4 #use to match height of progressbar
					}
				}

				default_progressbar_horizontal = {
					visible = "[Or(EqualTo_CFixedPoint(Company.GetProsperityChange,'(CFixedPoint)0'), GreaterThanOrEqualTo_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"
					size = { 90%  100% }

					blockoverride "values" {
						min = 0
						max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
						value = "[Company.GetProsperity]"
					}
				}

				default_progressbar_horizontal = {
					visible = "[NotEqualTo_CFixedPoint(Company.GetProsperity, Company.GetTargetProsperity)]"
					size = { 90%  100% }
					alpha = 0.2

					blockoverride "values" {
						min = 0
						max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
						value = "[Company.GetTargetProsperity]"
					}

					blockoverride "background" {}

					blockoverride  "frame" {}
				}
			}

			textbox = {
				text = "COMPANY_PROSPERITY_MODIFIER"
				alpha = "[TransparentIfFalse(Company.IsProsperous)]"
				using = company_item_text
			}
		}
	}

	type company_type_building_item = button {
		texture = "[BuildingType.GetIcon]"
		onrightclick = "[RightClickMenuManager.ShowForBuildingType(BuildingType.AccessSelf)]"
		effectname = "NoHighlight"
		distribute_visual_state = no
		inherit_visual_state = no
		alpha = "[TransparentIfZero_int32(BuildingType.GetNumLevelsInCountryRaw(GetPlayer.Self))]"

		block "icon_size" {
			size = { 50 50 }	
		}

		textbox = {
			text = "[BuildingType.GetNumLevelsInCountryFormatted(GetPlayer.Self)]"
			autoresize = yes
			position = { 5 -2 }
			parentanchor = bottom
			align = right|nobaseline
		}

		tooltipwidget = {
			FancyTooltip_BuildingType = {}
		}
	}
	
	type company_type_prestige_good_item = icon {
		texture = "[Goods.GetTexture]"
		size = { 30 30 }	
		tooltipwidget = {
			FancyTooltip_Goods = {}
		}
	}	

	type company_building_item = button {
		texture = "[BuildingType.GetIcon]"
		onrightclick = "[RightClickMenuManager.ShowForBuildingType(BuildingType.AccessSelf)]"
		effectname = "NoHighlight"
		distribute_visual_state = no
		inherit_visual_state = no
		alpha = "[TransparentIfZero_int32(BuildingType.GetNumLevelsOwnedByCompanyRaw(Company.Self))]"

		block "icon_size" {
			size = { 50 50 }
		}

		textbox = {
			visible = "[NotEqualTo_int32(BuildingType.GetNumLevelsOwnedByCompanyRaw(Company.Self), '(int32)0')]"
			autoresize = yes
			position = { 5 -2 }
			parentanchor = bottom
			align = right|nobaseline
			max_width = 50
			elide = right
			fontsize_min = 12
			raw_text = "[BuildingType.GetNumLevelsOwnedByCompanyFormatted(Company.Self)]/[BuildingType.GetNumLevelsInCountryFormatted(Company.GetCountry.Self)]"
		}

		tooltipwidget = {
			FancyTooltip_BuildingType = {}
		}
	}
}

template company_item_text {
	align = nobaseline
	autoresize = yes
	maximumsize = { 270 -1 }
	multiline = yes
}

template companies_header_texts {
	minimumsize = { @panel_width_plus_14 -1 }
	maximumsize = { @panel_width_plus_14 -1 }
	autoresize = yes
	multiline = yes
	align = hcenter|nobaseline
	parentanchor = hcenter
}

template alternating_dark_bg {
	background = {
		visible = "[IsOdd_int32(PdxGuiWidget.GetIndexInDataModel)]"
		using = dark_area
		alpha = 0.15
	}
}
