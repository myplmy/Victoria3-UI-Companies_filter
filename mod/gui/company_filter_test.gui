# gui/company_filter_test.gui
# 스크롤 제거 + 필터링 수정 버전

types company_filter_test
{
    type test_container = flowcontainer {
        direction = vertical
        spacing = 20
        margin = { 10 10 }
        
        background = {
            using = dark_area
        }
        
        ### ========== STEP 1A ========== ###
        flowcontainer = {
            direction = vertical
            spacing = 5
            
            textbox = {
                raw_text = "========== STEP 1A: Variable Test =========="
                autoresize = yes
                default_format = "#bold"
                align = hcenter|nobaseline
            }
            
            textbox = {
                visible = "[GetPlayer.MakeScope.Var('com_test_var').IsSet]"
                raw_text = "Variable SET: [GetPlayer.MakeScope.Var('com_test_var').GetValue]"
                autoresize = yes
            }
            
            textbox = {
                visible = "[Not(GetPlayer.MakeScope.Var('com_test_var').IsSet)]"
                raw_text = "Variable NOT SET"
                autoresize = yes
            }
            
            button = {
                size = { 180 35 }
                using = default_button
                onclick = "[GetScriptedGui('com_test_set_variable').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                
                textbox = {
                    parentanchor = center
                    raw_text = "Set Variable"
                    autoresize = yes
                }
            }
            
            button = {
                visible = "[GetPlayer.MakeScope.Var('com_test_var').IsSet]"
                size = { 180 35 }
                using = default_button
                onclick = "[GetScriptedGui('com_test_clear_variable').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                
                textbox = {
                    parentanchor = center
                    raw_text = "Clear Variable"
                    autoresize = yes
                }
            }
        }
        
        divider_clean = {}
        
        ### ========== STEP 2E ========== ###
        flowcontainer = {
            direction = vertical
            spacing = 10
            
            textbox = {
                raw_text = "========== STEP 2E: Company Categories =========="
                autoresize = yes
                default_format = "#bold"
                align = hcenter|nobaseline
            }
            
            # Attainable Companies 확인
            flowcontainer = {
                direction = vertical
                spacing = 5
                
                textbox = {
                    raw_text = "Attainable Companies (달성 가능)"
                    autoresize = yes
                    default_format = "#bold"
                }
                
                textbox = {
                    raw_text = "Count: [GetDataModelSize(AccessPlayer.GetAttainableCompanies)]"
                    autoresize = yes
                }
            }
            
            # 첫 번째 Attainable Company의 BuildingType 아이콘
            flowcontainer = {
                visible = "[Not(IsDataModelEmpty(AccessPlayer.GetAttainableCompanies))]"
                datamodel = "[AccessPlayer.GetAttainableCompanies]"
                direction = vertical
                spacing = 5
                
                item = {
                    flowcontainer = {
                        visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0')]"
                        direction = vertical
                        spacing = 5
                        
                        textbox = {
                            raw_text = "Click a building icon: [CompanyType.GetName]"
                            autoresize = yes
                            align = hcenter|nobaseline
                        }
                        
                        container = {
                            dynamicgridbox = {
                                datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                                datamodel_wrap = 5
                                
                                item = {
                                    button = {
                                        size = { 60 60 }
                                        texture = "[BuildingType.GetIcon]"
                                        onclick = "[GetScriptedGui('com_save_building_type').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('building_type', BuildingType.MakeScope).End)]"
                                        tooltipwidget = { FancyTooltip_BuildingType = {} }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            # 저장된 BuildingType 표시
            textbox = {
                visible = "[GetPlayer.MakeScope.Var('com_saved_building').IsSet]"
                raw_text = "Saved: [GetPlayer.MakeScope.Var('com_saved_building').GetBuildingType.GetName]"
                autoresize = yes
            }
            
            textbox = {
                visible = "[Not(GetPlayer.MakeScope.Var('com_saved_building').IsSet)]"
                raw_text = "No building saved"
                autoresize = yes
            }
            
            button = {
                visible = "[GetPlayer.MakeScope.Var('com_saved_building').IsSet]"
                size = { 180 35 }
                using = default_button
                onclick = "[GetScriptedGui('com_clear_building_type').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                
                textbox = {
                    parentanchor = center
                    raw_text = "Clear Building"
                    autoresize = yes
                }
            }
        }
        
        divider_clean = {}
        
        ### ========== STEP 3A ========== ###
        flowcontainer = {
            direction = vertical
            spacing = 10
            
            textbox = {
                raw_text = "========== STEP 3A: Filter Check =========="
                autoresize = yes
                default_format = "#bold"
                fontsize = 18
                align = hcenter|nobaseline
            }
            
            textbox = {
                visible = "[GetPlayer.MakeScope.Var('com_saved_building').IsSet]"
                raw_text = "Saved: [GetPlayer.MakeScope.Var('com_saved_building').GetBuildingType.GetName]"
                autoresize = yes
                default_format = "#bold"
            }
            
            textbox = {
                visible = "[Not(GetPlayer.MakeScope.Var('com_saved_building').IsSet)]"
                raw_text = "No building saved - Click icon above"
                autoresize = yes
            }
            
            # 회사 목록 (체크마크 표시)
            flowcontainer = {
                visible = "[GetPlayer.MakeScope.Var('com_saved_building').IsSet]"
                direction = vertical
                spacing = 3
                
                textbox = {
                    raw_text = "Companies with this building:"
                    autoresize = yes
                    default_format = "#bold"
                    margin_top = 10
                }
                
                flowcontainer = {
                    datamodel = "[AccessPlayer.GetAttainableCompanies]"
                    direction = vertical
                    spacing = 2
                    
                    item = {
                        flowcontainer = {
                            direction = horizontal
                            spacing = 5
                            minimumsize = { 500 30 }
                            
                            icon = {
                                size = { 25 25 }
                                texture = "[CompanyType.GetIcon]"
                                parentanchor = vcenter
                            }
                            
                            textbox = {
                                raw_text = "[CompanyType.GetName]"
                                autoresize = yes
                                max_width = 400
                                align = left|nobaseline
                                parentanchor = vcenter
                                elide = right
                            }
                            
                            expand = {}
                            
                            flowcontainer = {
                                direction = horizontal
                                parentanchor = vcenter
                                datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                                
                                item = {
                                    textbox = {
                                        visible = "[ObjectsEqual(BuildingType.MakeScope, GetPlayer.MakeScope.Var('com_saved_building').GetBuildingType.MakeScope)]"
                                        raw_text = "✓"
                                        autoresize = yes
                                        fontsize = 20
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        divider_clean = {}
        
        ### ========== STEP 3B ========== ###
        flowcontainer = {
            visible = "[GetPlayer.MakeScope.Var('com_saved_building').IsSet]"
            direction = vertical
            spacing = 10
            
            textbox = {
                raw_text = "========== STEP 3B: Filtered List =========="
                autoresize = yes
                default_format = "#bold"
                align = hcenter|nobaseline
            }
            
            textbox = {
                raw_text = "Filter: [GetPlayer.MakeScope.Var('com_saved_building').GetBuildingType.GetName]"
                autoresize = yes
                align = hcenter|nobaseline
                default_format = "#italic"
            }
            
            # 필터링된 회사 카드 (이전 버전 로직 유지)
            flowcontainer = {
                direction = vertical
                datamodel = "[AccessPlayer.GetAttainableCompanies]"
                spacing = 5
                
                item = {
                    container = {
                        datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                        
                        item = {
                            flowcontainer = {
                                visible = "[ObjectsEqual(BuildingType.MakeScope, GetPlayer.MakeScope.Var('com_saved_building').GetBuildingType.MakeScope)]"
                                direction = vertical
                                spacing = 5
                                minimumsize = { 500 -1 }
                                margin = { 10 5 }
                                
                                background = {
                                    using = dark_area
                                    alpha = 0.3
                                }
                                
                                flowcontainer = {
                                    direction = horizontal
                                    spacing = 10
                                    
                                    icon = {
                                        size = { 40 40 }
                                        texture = "[CompanyType.GetIcon]"
                                        parentanchor = vcenter
                                    }
                                    
                                    flowcontainer = {
                                        direction = vertical
                                        spacing = 3
                                        parentanchor = vcenter
                                        
                                        textbox = {
                                            raw_text = "[CompanyType.GetName]"
                                            autoresize = yes
                                            default_format = "#bold"
                                            fontsize = 16
                                        }
                                        
                                        textbox = {
                                            raw_text = "BuildingTypes: [GetDataModelSize(CompanyType.AccessBuildingTypes(GetPlayer.Self))]"
                                            autoresize = yes
                                            fontsize = 14
                                        }
                                    }
                                    
                                    expand = {}
                                    
                                    icon = {
                                        size = { 30 30 }
                                        texture = "gfx/interface/buttons/button_icons/check.dds"
                                        parentanchor = vcenter
                                    }
                                }
                                
                                flowcontainer = {
                                    direction = vertical
                                    margin = { 5 5 }
                                    
                                    dynamicgridbox = {
                                        datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                                        datamodel_wrap = 8
                                        
                                        item = {
                                            button = {
                                                size = { 50 50 }
                                                texture = "[BuildingType.GetIcon]"
                                                
                                                background = {
                                                    visible = "[ObjectsEqual(BuildingType.MakeScope, GetPlayer.MakeScope.Var('com_saved_building').GetBuildingType.MakeScope)]"
                                                    using = highlighted_square_selection
                                                }
                                                
                                                tooltipwidget = {
                                                    FancyTooltip_BuildingType = {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        divider_clean = {}
        
        ### ========== STEP 4 ========== ###
        flowcontainer = {
            direction = vertical
            spacing = 10
            
            textbox = {
                raw_text = "========== STEP 4: Auto Filter (wheat_farm) =========="
                autoresize = yes
                default_format = "#bold"
                fontsize = 18
                align = hcenter|nobaseline
            }
            
            textbox = {
                raw_text = "Automatically filtering companies with: building_wheat_farm"
                autoresize = yes
                align = hcenter|nobaseline
                default_format = "#italic"
            }
            
            # wheat_farm을 가진 회사만 필터링
            flowcontainer = {
                direction = vertical
                datamodel = "[AccessPlayer.GetAttainableCompanies]"
                spacing = 5
                
                item = {
                    container = {
                        datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                        
                        item = {
                            flowcontainer = {
                                visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_wheat_farm').Self)]"
                                direction = vertical
                                spacing = 5
                                minimumsize = { 500 -1 }
                                margin = { 10 5 }
                                
                                background = {
                                    using = dark_area
                                    alpha = 0.3
                                }
                                
                                flowcontainer = {
                                    direction = horizontal
                                    spacing = 10
                                    
                                    icon = {
                                        size = { 40 40 }
                                        texture = "[CompanyType.GetIcon]"
                                        parentanchor = vcenter
                                    }
                                    
                                    flowcontainer = {
                                        direction = vertical
                                        spacing = 3
                                        parentanchor = vcenter
                                        
                                        textbox = {
                                            raw_text = "[CompanyType.GetName]"
                                            autoresize = yes
                                            default_format = "#bold"
                                            fontsize = 16
                                        }
                                        
                                        textbox = {
                                            raw_text = "Buildings: [GetDataModelSize(CompanyType.AccessBuildingTypes(GetPlayer.Self))]"
                                            autoresize = yes
                                            fontsize = 14
                                        }
                                    }
                                    
                                    expand = {}
                                    
                                    icon = {
                                        size = { 30 30 }
                                        texture = "gfx/interface/buttons/button_icons/check.dds"
                                        parentanchor = vcenter
                                    }
                                }
                                
                                flowcontainer = {
                                    direction = vertical
                                    margin = { 5 5 }
                                    
                                    dynamicgridbox = {
                                        datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                                        datamodel_wrap = 8
                                        
                                        item = {
                                            button = {
                                                size = { 50 50 }
                                                texture = "[BuildingType.GetIcon]"
                                                
                                                background = {
                                                    visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_wheat_farm').Self)]"
                                                    using = highlighted_square_selection
                                                }
                                                
                                                tooltipwidget = {
                                                    FancyTooltip_BuildingType = {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            textbox = {
                raw_text = "If companies are shown above, wheat_farm filtering works!"
                autoresize = yes
                align = hcenter|nobaseline
                margin_top = 10
                fontsize = 12
            }
        }
        
        divider_clean = {}
        
        ### ========== STEP 5 ========== ###
        flowcontainer = {
            direction = vertical
            spacing = 10
            
            textbox = {
                raw_text = "========== STEP 5: Auto Filter (logging_camp) =========="
                autoresize = yes
                default_format = "#bold"
                fontsize = 18
                align = hcenter|nobaseline
            }
            
            textbox = {
                raw_text = "Filter: building_logging_camp (기본 산업만)"
                autoresize = yes
                align = hcenter|nobaseline
                default_format = "#italic"
            }
            
            textbox = {
                raw_text = "NOTE: extension_building_types는 Company 설립 후에만 확인 가능"
                autoresize = yes
                align = hcenter|nobaseline
                fontsize = 12
                margin_bottom = 10
            }
            
            # logging_camp을 기본 building_types로 가진 회사 필터링
            flowcontainer = {
                direction = vertical
                datamodel = "[AccessPlayer.GetAttainableCompanies]"
                spacing = 5
                
                item = {
                    container = {
                        datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                        
                        item = {
                            flowcontainer = {
                                visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_logging_camp').Self)]"
                                direction = vertical
                                spacing = 5
                                minimumsize = { 500 -1 }
                                margin = { 10 5 }
                                
                                background = {
                                    using = dark_area
                                    alpha = 0.3
                                }
                                
                                flowcontainer = {
                                    direction = horizontal
                                    spacing = 10
                                    
                                    icon = {
                                        size = { 40 40 }
                                        texture = "[CompanyType.GetIcon]"
                                        parentanchor = vcenter
                                    }
                                    
                                    flowcontainer = {
                                        direction = vertical
                                        spacing = 3
                                        parentanchor = vcenter
                                        
                                        textbox = {
                                            raw_text = "[CompanyType.GetName]"
                                            autoresize = yes
                                            default_format = "#bold"
                                            fontsize = 16
                                        }
                                        
                                        textbox = {
                                            raw_text = "Buildings: [GetDataModelSize(CompanyType.AccessBuildingTypes(GetPlayer.Self))]"
                                            autoresize = yes
                                            fontsize = 14
                                        }
                                    }
                                    
                                    expand = {}
                                    
                                    icon = {
                                        size = { 30 30 }
                                        texture = "gfx/interface/buttons/button_icons/check.dds"
                                        parentanchor = vcenter
                                    }
                                }
                                
                                flowcontainer = {
                                    direction = vertical
                                    margin = { 5 5 }
                                    
                                    dynamicgridbox = {
                                        datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                                        datamodel_wrap = 8
                                        
                                        item = {
                                            button = {
                                                size = { 50 50 }
                                                texture = "[BuildingType.GetIcon]"
                                                
                                                background = {
                                                    visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_logging_camp').Self)]"
                                                    using = highlighted_square_selection
                                                }
                                                
                                                tooltipwidget = {
                                                    FancyTooltip_BuildingType = {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            textbox = {
                raw_text = "If companies are shown above, logging_camp filtering works!"
                autoresize = yes
                align = hcenter|nobaseline
                margin_top = 10
                fontsize = 12
            }
        }
        
        divider_clean = {}

        ### ========== STEP 6 ========== ###
        flowcontainer = {
            direction = vertical
            spacing = 10
            
            textbox = {
                raw_text = "========== STEP 6: GetPotentialBuildingTypes Test =========="
                autoresize = yes
                default_format = "#bold"
                fontsize = 18
                align = hcenter|nobaseline
            }
            
            textbox = {
                raw_text = "Testing: CompanyType.GetPotentialBuildingTypes(Country)"
                autoresize = yes
                align = hcenter|nobaseline
                default_format = "#italic"
            }
            
            textbox = {
                raw_text = "이 함수가 building_types + extension_building_types를 반환하는지 확인"
                autoresize = yes
                align = hcenter|nobaseline
                fontsize = 12
                margin_bottom = 10
            }
            
            # 첫 번째 Attainable Company로 테스트
            flowcontainer = {
                visible = "[Not(IsDataModelEmpty(AccessPlayer.GetAttainableCompanies))]"
                datamodel = "[AccessPlayer.GetAttainableCompanies]"
                direction = vertical
                spacing = 10
                
                item = {
                    flowcontainer = {
                        visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0')]"
                        direction = vertical
                        spacing = 10
                        minimumsize = { 500 -1 }
                        margin = { 10 10 }
                        
                        background = {
                            using = dark_area
                            alpha = 0.4
                        }
                        
                        # Company 정보
                        flowcontainer = {
                            direction = horizontal
                            spacing = 10
                            
                            icon = {
                                size = { 50 50 }
                                texture = "[CompanyType.GetIcon]"
                                parentanchor = vcenter
                            }
                            
                            flowcontainer = {
                                direction = vertical
                                spacing = 3
                                parentanchor = vcenter
                                
                                textbox = {
                                    raw_text = "Test Company: [CompanyType.GetName]"
                                    autoresize = yes
                                    default_format = "#bold"
                                    fontsize = 16
                                }
                                
                                textbox = {
                                    raw_text = "Key: [CompanyType.GetKey]"
                                    autoresize = yes
                                    fontsize = 12
                                }
                            }
                        }
                        
                        divider_clean = {}
                        
                        # AccessBuildingTypes 결과
                        flowcontainer = {
                            direction = vertical
                            spacing = 5
                            
                            textbox = {
                                raw_text = "A) AccessBuildingTypes (기본 산업):"
                                autoresize = yes
                                default_format = "#bold"
                            }
                            
                            textbox = {
                                raw_text = "Count: [GetDataModelSize(CompanyType.AccessBuildingTypes(GetPlayer.Self))]"
                                autoresize = yes
                            }
                            
                            dynamicgridbox = {
                                datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                                datamodel_wrap = 6
                                
                                item = {
                                    button = {
                                        size = { 50 50 }
                                        texture = "[BuildingType.GetIcon]"
                                        tooltipwidget = { FancyTooltip_BuildingType = {} }
                                    }
                                }
                            }
                        }
                        
                        divider_clean = {}
                        
                        # GetPotentialBuildingTypes 결과
                        flowcontainer = {
                            direction = vertical
                            spacing = 5
                            
                            textbox = {
                                raw_text = "B) GetPotentialBuildingTypes (잠재 산업):"
                                autoresize = yes
                                default_format = "#bold"
                            }
                            
                            textbox = {
                                raw_text = "Count: [GetDataModelSize(CompanyType.GetPotentialBuildingTypes(GetPlayer.Self))]"
                                autoresize = yes
                            }
                            
                            dynamicgridbox = {
                                datamodel = "[CompanyType.GetPotentialBuildingTypes(GetPlayer.Self)]"
                                datamodel_wrap = 6
                                
                                item = {
                                    button = {
                                        size = { 50 50 }
                                        texture = "[BuildingType.GetIcon]"
                                        tooltipwidget = { FancyTooltip_BuildingType = {} }
                                    }
                                }
                            }
                        }
                        
                        divider_clean = {}
                        
                        # 비교 결과
                        flowcontainer = {
                            direction = vertical
                            spacing = 3
                            
                            textbox = {
                                raw_text = "Result:"
                                autoresize = yes
                                default_format = "#bold"
                            }
                            
                            # Count가 같으면
                            textbox = {
                                visible = "[EqualTo_int32(GetDataModelSize(CompanyType.AccessBuildingTypes(GetPlayer.Self)), GetDataModelSize(CompanyType.GetPotentialBuildingTypes(GetPlayer.Self)))]"
                                raw_text = "✗ Same count - GetPotentialBuildingTypes only returns building_types"
                                autoresize = yes
                                default_format = "#high"
                            }
                            
                            # Count가 다르면
                            textbox = {
                                visible = "[Not(EqualTo_int32(GetDataModelSize(CompanyType.AccessBuildingTypes(GetPlayer.Self)), GetDataModelSize(CompanyType.GetPotentialBuildingTypes(GetPlayer.Self))))]"
                                raw_text = "✓ Different count - GetPotentialBuildingTypes includes extensions!"
                                autoresize = yes
                                default_format = "#P"
                            }
                        }
                    }
                }
            }
        }
        
        divider_clean = {}
        
        ### ========== STEP 7 ========== ###
        flowcontainer = {
            direction = vertical
            spacing = 10
            
            textbox = {
                raw_text = "========== STEP 7: Extension Filter (logging_camp) =========="
                autoresize = yes
                default_format = "#bold"
                fontsize = 18
                align = hcenter|nobaseline
            }
            
            textbox = {
                raw_text = "Filter: Companies with logging_camp in GetPotentialBuildingTypes"
                autoresize = yes
                align = hcenter|nobaseline
                default_format = "#italic"
            }
            
            textbox = {
                raw_text = "기본 산업 + 확장 산업 모두 포함"
                autoresize = yes
                align = hcenter|nobaseline
                fontsize = 12
                margin_bottom = 10
            }
            
            # logging_camp을 Potential에 가진 회사 필터링
            flowcontainer = {
                direction = vertical
                datamodel = "[AccessPlayer.GetAttainableCompanies]"
                spacing = 3
                
                item = {
                    container = {
                        datamodel = "[CompanyType.GetPotentialBuildingTypes(GetPlayer.Self)]"
                        
                        item = {
                            flowcontainer = {
                                visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_logging_camp').Self)]"
                                direction = horizontal
                                spacing = 8
                                minimumsize = { 500 -1 }
                                margin = { 5 3 }
                                
                                background = {
                                    using = dark_area
                                    alpha = 0.3
                                }
                                
                                # 회사 아이콘
                                icon = {
                                    size = { 35 35 }
                                    texture = "[CompanyType.GetIcon]"
                                    parentanchor = vcenter
                                }
                                
                                # 회사 이름
                                textbox = {
                                    raw_text = "[CompanyType.GetName]"
                                    autoresize = yes
                                    default_format = "#bold"
                                    fontsize = 14
                                    parentanchor = vcenter
                                    max_width = 160
                                    elide = right
                                }
                                
                                expand = {}
                                
                                # Base 아이콘들
                                flowcontainer = {
                                    direction = horizontal
                                    spacing = 2
                                    parentanchor = vcenter
                                    
                                    textbox = {
                                        raw_text = "Base:"
                                        autoresize = yes
                                        fontsize = 10
                                        parentanchor = vcenter
                                    }
                                    
                                    flowcontainer = {
                                        direction = horizontal
                                        spacing = 1
                                        datamodel = "[CompanyType.AccessBuildingTypes(GetPlayer.Self)]"
                                        
                                        item = {
                                            icon = {
                                                size = { 30 30 }
                                                texture = "[BuildingType.GetIcon]"
                                                
                                                background = {
                                                    visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_logging_camp').Self)]"
                                                    using = highlighted_square_selection
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                # Potential 아이콘들
                                flowcontainer = {
                                    direction = horizontal
                                    spacing = 2
                                    parentanchor = vcenter
                                    
                                    textbox = {
                                        raw_text = "All:"
                                        autoresize = yes
                                        fontsize = 10
                                        parentanchor = vcenter
                                    }
                                    
                                    flowcontainer = {
                                        direction = horizontal
                                        spacing = 1
                                        datamodel = "[CompanyType.GetPotentialBuildingTypes(GetPlayer.Self)]"
                                        
                                        item = {
                                            icon = {
                                                size = { 30 30 }
                                                texture = "[BuildingType.GetIcon]"
                                                
                                                background = {
                                                    visible = "[ObjectsEqual(BuildingType.Self, GetBuildingType('building_logging_camp').Self)]"
                                                    using = highlighted_square_selection
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            textbox = {
                raw_text = "If companies are shown, GetPotentialBuildingTypes filtering works!"
                autoresize = yes
                align = hcenter|nobaseline
                margin_top = 10
                fontsize = 12
            }
        }
        
        divider_clean = {}



    }
}